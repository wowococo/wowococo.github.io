<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>iota</title>
    <link href="/2021/06/28/iota/"/>
    <url>/2021/06/28/iota/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>iota，英文发音是 [aɪˈoʊtə]，代表希腊字母表的第九个字母。它在Go里代表一个特殊常量，用在常量块中，可以看做它是常量块的行索引。比如说，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>        a = <span class="hljs-literal">iota</span>     <span class="hljs-comment">// 0</span><br>        b            <span class="hljs-comment">// 1</span><br>        c            <span class="hljs-comment">// 2</span><br>        d = <span class="hljs-string">&quot;haha&quot;</span>   <span class="hljs-comment">// &quot;haha&quot;, iota = 3 </span><br>        e            <span class="hljs-comment">// &quot;haha&quot;, iota = 4</span><br>        f            <span class="hljs-comment">// &quot;haha&quot;, iota = 5</span><br>        g = <span class="hljs-number">10000</span>    <span class="hljs-comment">// 10000   iota = 6</span><br>        h            <span class="hljs-comment">// 10000   iota = 7</span><br>        i = <span class="hljs-literal">iota</span>     <span class="hljs-comment">// 8, 恢复计数</span><br>        j            <span class="hljs-comment">// 9</span><br>        k            <span class="hljs-comment">// 10</span><br>)<br></code></pre></td></tr></table></figure><p>再看一个例子, 当没有给一个常量分配值时，它默认和它上一个保持一致。如果是表达式，保持一致指的是同样的表达式，但是同样的表达式对应的实际值是不一定相等的。即c 是3&lt;&lt;iota,  此时iota的值是2，d是3&lt;&lt;iota, 此时iota的值是3。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    a = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-literal">iota</span>  <span class="hljs-comment">// 1  1左移0位，1*2^0=1  iota = 0</span><br>    b = <span class="hljs-number">3</span>&lt;&lt;<span class="hljs-literal">iota</span>  <span class="hljs-comment">// 6  3左移1位，3*2^1=6  iota = 1</span><br>    c            <span class="hljs-comment">// 12 3左移2位，3*2^2=12 iota = 2</span><br>    d            <span class="hljs-comment">// 24 3左移3位，3*2^3=24 iota = 3</span><br>)<br></code></pre></td></tr></table></figure><p>注：&lt;&lt;n = *(2^n)</p>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NoSQL</title>
    <link href="/2021/06/09/NoSQL/"/>
    <url>/2021/06/09/NoSQL/</url>
    
    <content type="html"><![CDATA[<h2 id="NoSQL是什么"><a href="#NoSQL是什么" class="headerlink" title="NoSQL是什么"></a>NoSQL是什么</h2><p>NoSQL是 Not only SQL</p><h2 id="3v和-3-高"><a href="#3v和-3-高" class="headerlink" title="3v和 3 高"></a>3v和 3 高</h2><p>海量、多样、实时</p><p>高可用、高可扩、高并发</p><h2 id="为什么需要NoSQL"><a href="#为什么需要NoSQL" class="headerlink" title="为什么需要NoSQL"></a>为什么需要NoSQL</h2><p>随着web2.0时代的到来，传统关系型数据库已不能满足大数据时代的3v和3高，</p><h2 id="关系型数据库和NoSQL的区别"><a href="#关系型数据库和NoSQL的区别" class="headerlink" title="关系型数据库和NoSQL的区别"></a>关系型数据库和NoSQL的区别</h2><table><thead><tr><th>RDBMS</th><th>NOSQL</th></tr></thead><tbody><tr><td></td><td>解耦合</td></tr><tr><td></td><td>存储类型不限，可存社交网络、流媒体</td></tr><tr><td>设计一个好的表需要天赋</td><td>不需要预先设计好表</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>进程间的通信方式</title>
    <link href="/2021/05/18/%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/05/18/%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h2><p>进程间的用户空间是各自独立，不共享的，但是可以通过内核空间来实现通信。比如，管道、消息队列、共享内存、信号量、信号、socket, 这几种方式逐一递进，下一级解决了上一个的一些不足。前五种都是在同一台主机上的进程间的通信，最后一个 socket 可以实现跨主机跨网络的进程通信。</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道是内核里面的一串缓存。</p><p>有匿名管道和命名管道。Linux里的管道符 | 就是匿名管道，对于匿名管道，它的通信范围是存在父子关系的进程，对于命名管道，它的通信范围可以是没有关系的进程。</p><p>优点：简单</p><p>缺点：一个命令向 管道里写入数据之后只有被其他命令读取后才可以正常退出，这种方式对于频繁的进程操作不友好。</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>消息队列是内核中的消息链表。</p><p>一个进程把消息放在消息队列里，就可以退出了。另一个进程什么时候需要就什么时候去读。就像双方发邮件一样。</p><p>优点: 可以解决上面管道存在的问题，一个发数据的进程不用等待另一个进程退出才能退出。</p><p>缺点：通信不及时，就像邮件的附件一样，它不能过大，所以它不能传输大数据量，通信过程中存在用户态和内核态之间的数据拷贝开销。</p><h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><p>上面提到的消息队列中存在用户态和内核态之间的数据拷贝开销，而使用共享内存可以解决这个问题。共享内存是指两个进程各自用自己的一块虚拟内存去共享同一块物理内存。一个进程修改了共享内存，另一个进程马上就能感知到。</p><p>优点：能够避免用户态和内核态之间的数据拷贝开销，提高通信效率。</p><p>缺点：如果有多个进程一起修改共享内存，会造成冲突，有可能这个进程修改的部分被其他进程所做的修改覆盖。</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量针对共享内存存在的多进程同时修改造成冲突的问题所提出的一种解决方法。<br>P: 在执行进程前，<br>V: 在执行进程后</p>]]></content>
    
    
    
    <tags>
      
      <tag>进程 操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务与RPC</title>
    <link href="/2021/05/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8ERPC/"/>
    <url>/2021/05/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8ERPC/</url>
    
    <content type="html"><![CDATA[<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务是为了解决单体应用下服务之间耦合度高、不容易扩展的问题，而提出的一个概念，微服务是一些协同工作小而自治的服务。<br>微服务下，各个服务</p><h2 id="RPC-是什么"><a href="#RPC-是什么" class="headerlink" title="RPC 是什么"></a>RPC 是什么</h2><p>RPC 全称是 Remote Procedure Call, 即远程过程调用，是为了解决分布式系统下不同服务间调用的问题。RPC 的本质是动态代理 + socket 通信。一般情况下，不同服务间的通信可以通过 HTTP 请求接口的方式，这种方式简单，但是在服务间相互调用比较多、接口很多的情况下，http + restful 的方式需要写一串发起http请求的代码，那么就需要</p><h2 id="RPC为什么可以提升服务间的调用效率"><a href="#RPC为什么可以提升服务间的调用效率" class="headerlink" title="RPC为什么可以提升服务间的调用效率"></a>RPC为什么可以提升服务间的调用效率</h2><p>比如说数据的序列化方式protobuf是二进制的，相比文本类型的json和xml来说，压缩后体积更小，传输速率更快。</p>]]></content>
    
    
    
    <tags>
      
      <tag>RPC 微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成器</title>
    <link href="/2021/05/12/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2021/05/12/%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>生成器是可以返回多次的函数，可以使用next()函数来获取生成器的下一个返回值，它不像[]包裹的列表生成式那样保存的是一个列表，列表中有很多元素，生成器保存的是算法，通过调用next(g)函数来计算生成器的下一个元素的值，直到最后没有更多的元素时，抛出 stopIteration 异常。</p><p>可以通过将列表生成式的 [] 改为 () 来创建一个生成器，也可以通过写一个带有 yield 关键字的函数来创建生成器。</p><p>生成器和普通函数的区别是：<br>普通函数是顺序执行，遇到return 关键字或者函数的最后一行时就返回；而生成器是调用next()函数就去执行，遇到 yield 关键字就返回，下次执行时从上次返回的地方继续。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>装饰器</title>
    <link href="/2021/05/11/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2021/05/11/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h2><p>装饰器是一个能返回函数的高阶函数。它以@符号的形式装饰一个函数，可以给被装饰的函数增强功能。比如可以统计这个函数的执行时间，运行函数的时候打日志等。</p><h2 id="实现一个不带参数的装饰器"><a href="#实现一个不带参数的装饰器" class="headerlink" title="实现一个不带参数的装饰器"></a>实现一个不带参数的装饰器</h2><p>不带参数的装饰器用两层函数来实现，它对于被装饰函数 f 所做的事情是 f = metric(f)</p><pre><code>import timefrom functools import wrapsdef metric(func):    @wraps(func)    def wrapper(*args, **kw):        start = time.perf_counter()        res = func(*args, **kw)        end = time.perf_counter()        cost = (end - start) * 1000        print(f&quot;&#123;func.__name__&#125; finished in &#123;cost&#125;ms&quot;)        return res    return wrapper@metricdef slow(x, y):    time.sleep(0.1234)    return x + y@metricdef fast(x, y, z):    time.sleep(0.0012)    return x * y * zdef test_deco():    s = slow(1, 3)    f = fast(3, 4, 5)    assert s == 4    assert f == 60test_deco()</code></pre><p>这段代码的执行结果是</p><pre><code>slow finished in 138.6591msfast finished in 14.628799999999998ms</code></pre><h2 id="实现一个带参数的装饰器"><a href="#实现一个带参数的装饰器" class="headerlink" title="实现一个带参数的装饰器"></a>实现一个带参数的装饰器</h2><p>带参数的装饰器用三层函数来实现。它对于被装饰函数 f 所做的事情是 f = log(‘INFO’)(f)</p><pre><code>def log(level):    def decorator(func):        def wrapper(*args, **kw):            print(f&#39;&#123;level&#125; begin call&#39;)            func(*args, **kw)            print(f&#39;&#123;level&#125; end call&#39;)        return wrapper    return decorator@log(&#39;INFO&#39;)def f():    passf()</code></pre><p>这段代码的执行结果是</p><pre><code>INFO begin callINFO end call</code></pre><h2 id="装饰器的执行过程"><a href="#装饰器的执行过程" class="headerlink" title="装饰器的执行过程"></a>装饰器的执行过程</h2><p>拿上面的带参数的装饰器来举例子，首先调用 log(‘INFO’),返回 decoorator, 然后调用 decorator函数，传入参数 func，返回 wrapper函数，再调用wrapper函数，在wrapper 函数里调用被装饰的函数。<br>因此 log 的返回值需要是 decorator, 才能继续调用 decorator，decorator 的返回值需要时 wrapper，才能继续调用 wrapper 函数，至于 wrapper 函数的返回值，我觉得不是必要有返回值，依据下面是如何调用被装饰的函数 f 的，如果要用 f 的返回值，那么就 res = func(*args, **kw), wrapper 函数返回 res, 如果用不到，wrapper函数可以不返回（当然不返回也有默认返回值是 None）。</p><p>以一段代码来看下：</p><pre><code>def log(level):    def decorator(func):        def wrapper(*args, **kw):            print(&#39;3&#39;)            print(f&#39;&#123;level&#125; begin call&#39;)            func(*args, **kw)            print(&#39;5&#39;)            print(f&#39;&#123;level&#125; end call&#39;)        print(&#39;2&#39;)        return wrapper    print(&#39;1&#39;)    return decorator@log(&#39;INFO&#39;)def f():    print(&#39;4&#39;)    passf()</code></pre><p>执行结果为：</p><pre><code>123INFO begin call45INFO end call</code></pre><h2 id="functools-wraps"><a href="#functools-wraps" class="headerlink" title="functools.wraps"></a>functools.wraps</h2><p>不管是两层还是三层，都有一个问题，就是被装饰的函数的名字会变成 wrapper, 看下面这段代码，最后打印被装饰的函数 f 的名字由 f 变成了 wrapper, 原因待写……</p><pre><code>def metric(func):    def wrapper(*args, **kw):        start = time.perf_counter()        func(*args, **kw)        end = time.perf_counter()        cost = (end - start) * 1000        print(f&quot;&#123;func.__name__&#125; finished in &#123;cost&#125;ms&quot;)    return wrapper@metricdef f():    passf()print(f.__name__)   #  it will print wrapper</code></pre><p>可以用内置函数工具 functools.wraps 来解决这个问题，functools.wraps 也是一个装饰器，它的作用是使被装饰的函数保留其原有的函数信息。它本质上做的事情是 wrapper.__name__ = func.__name__</p><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>博客学习自廖雪峰的网站，是自己的记录总结。<br>This is <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451662295584#0">廖雪峰的官方网站</a>。</p><h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><p>能否写出一个 @log 的装饰器，使它同时支持下面两种装饰</p><pre><code>@logdef f():    pass@log(&#39;execute&#39;)def f():    pass</code></pre><p>answer:<br>    注意上面是不带参数的装饰器，是 @log, 不等于 @log()</p><pre><code>def log(text):    def decorator(func):        def wrapper(*args, **kw):            if callable(text):                print(f&#39;begin call &#123;func.__name__&#125;&#39;)            else:                print(f&#39;&#123;text&#125; begin call &#123;func.__name__&#125;&#39;)            print(&#39;end call&#39;)        return wrapper    if callable(text):        return decorator(text)    return decorator@logdef f():    pass@log(&#39;execute&#39;)def f1():    pass</code></pre><p>执行结果为：</p><pre><code>begin call fend callexecute begin call f1end call</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NEED TO LEARN</title>
    <link href="/2021/04/25/NEED-TO-LEARN/"/>
    <url>/2021/04/25/NEED-TO-LEARN/</url>
    
    <content type="html"><![CDATA[<p>MySQL：数据存储结构、索引、锁、事务、MVCC、性能优化、高可用方案。MySQL 的确非常复杂，可以问的地方非常多。比如索引，哪些情况下索引失效，联合索引怎么用，什么原理一定要清楚。但凡有多种模式可以选择，一定要想想优劣对比。比如 InnoDB 引擎和 Myisam 引擎的区别，binlog 中有 Row 格式和 Statement 格式，二者有什么区别，为什么这么设计。<br>Redis：Redis 问的是真的多，首先他应用广很多企业都用 Redis，其次它代表了计算机领域一个大的基础问题：缓存，可以考你的点很多。Redis 的数据结构、底层结构、持久化方式这些是基础，然后很可能会结合实际情况，问你怎么用 Redis 的，用到了哪些数据结构，为什么这么选。然后的话是缓存同步的方式。这里我整理了一篇常见的缓存处理方式总结：缓存系统常见问题总结<br>框架：Spring 反而考的不多，可能是满大街都是了。问我的基本就是循环依赖、生命周期、AOP 原理，还有像 ApplicationContext BeanFactory 区别这种问题。然后 Mybatis 可能会问下一级缓存二级缓存。<br>消息队列：消息队列也是非常常用的组件，面试中也问的比较多。主要包括消息丢失、重复投递、保证有序这三种问题，要清楚实现原理。然后要了解消息队列本身的架构、高可用部署方式。<br>网络相关：HTTP、TCP/IP、七层网络模型等等基础知识点。然后 Netty 和 NIO，搞清楚 select poll epoll 的区别和联系。</p><p>容器相关：Docker 和 K8s，一般问点皮毛和应用，毕竟也不是做这个方向的。<br>前端：可能会问些 http 协议、跨域等等跟前后端都相关的问题，毕竟后端岗位，不太会问纯前端的问题。<br>微服务：Spring Cloud、Dubbo、Service Mesh。由于我做微服务很少，所以面试中也遇到的不多，最多就是问到 Hystrix 的熔断和其原理，还有调用链路的问题定位、监控等等。<br>Linux：基本就是看看你是不是实际用过 Linux，常见的 top、free、iostat、nload 等查看服务器各种状态的命令，然后就是遇到两家问我文本处理的脚本，像“输出 access.log 中频次最高的 100 个 IP 地址，去重排序后输出”，虽然做了准备但是平时很少有，现场没写出来…<br>分布式系统相关：几种分布式锁和要注意的问题，分布式一致性协议 Paxos、Raft 和 ZAB、Zookepper 的数据结构等等。然后就是分布式事务，2PC、3PC、TCC</p><h3 id="MySQL-选错索引"><a href="#MySQL-选错索引" class="headerlink" title="MySQL 选错索引"></a>MySQL 选错索引</h3><p>索引信息统计错误： 通过analyze table 表名; 来重新统计<br>其他原因：force index ()</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python thread</title>
    <link href="/2021/04/23/Python-thread/"/>
    <url>/2021/04/23/Python-thread/</url>
    
    <content type="html"><![CDATA[<h3 id="多核"><a href="#多核" class="headerlink" title="多核"></a>多核</h3><p>对于 Python 而言，因为有 GIL 锁的原因，每次 CPU 只能运行一个线程，所以即使是多核，Python 的多线程也只能用一个，发挥不出多核的优势。</p><h3 id="既然每次CPU只能跑一个线程，那Python多线程的优势在哪？"><a href="#既然每次CPU只能跑一个线程，那Python多线程的优势在哪？" class="headerlink" title="既然每次CPU只能跑一个线程，那Python多线程的优势在哪？"></a>既然每次CPU只能跑一个线程，那Python多线程的优势在哪？</h3><p>优势在于 IO 密集型的线程，可以利用 IO 阻塞等待时的空闲时间去执行另一个线程，Python 在 IO 阻塞的时候会释放 GIL 锁，然后 CPU 就切换到其他线程，等于说是这个线程的 IO 操作和另一个线程的 CPU 计算同时进行的，所以对于 IO 密集型的线程，Python 多线程速度还是快很多的。</p><p>CPU 密集型下，由于一个 CPU 时间片下只能运行一个线程，所以使用多线程并不能加快计算速度。相反可能因为频繁的切换线程，使速度更慢。</p>]]></content>
    
    
    
    <tags>
      
      <tag>thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2021/02/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2021/02/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h4 id="1653-使字符串平衡的最少删除次数"><a href="#1653-使字符串平衡的最少删除次数" class="headerlink" title="1653. 使字符串平衡的最少删除次数"></a><a href="https://leetcode-cn.com/problems/minimum-deletions-to-make-string-balanced/">1653. 使字符串平衡的最少删除次数</a></h4><ol><li><p>找出子问题</p><p>设大问题是big，字符串[:-1]的最少删除次数是子问题small，big 的结果由small 与最后一个字符共同作用。然后子问题继续拆分成子问题…</p></li><li><p>写状态转移方程</p><p>a:</p><p>​    big_end_a = small_end_a</p><p>​    big_end_b = small_end_b + 1    # 需要删掉最后的a</p><p>b:</p><p>​    big_end_b = min(small_end_a, small_end_b)</p><p>​    big_end_a = small_end_a + 1</p></li></ol><ol start="3"><li>Python 实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">minimumDeletions</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; int:</span><br>    end_a, end_b = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> char == <span class="hljs-string">&quot;a&quot;</span>:<br>            end_b = end_b + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            end_b = <span class="hljs-built_in">min</span>(end_a, end_b)<br>            end_a = end_a + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(end_a, end_b)<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LRU 实现</title>
    <link href="/2021/01/31/LRU%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/01/31/LRU%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>思路：</p><p>Python dict + 双向链表</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, k, v)</span></span><span class="hljs-symbol">:</span><br><span class="hljs-keyword">self</span>.key = k<br><span class="hljs-keyword">self</span>.val = v<br><span class="hljs-keyword">self</span>.prev = None<br><span class="hljs-keyword">self</span>.<span class="hljs-keyword">next</span> = None<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUCache</span>:</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, capacity)</span></span><span class="hljs-symbol">:</span><br><span class="hljs-keyword">self</span>.capacity = capacity<br><span class="hljs-keyword">self</span>.dic = dict()<br><span class="hljs-keyword">self</span>.head = Node(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">self</span>.tail = Node(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">self</span>.head.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">self</span>.tail<br><span class="hljs-keyword">self</span>.tail.prev = <span class="hljs-keyword">self</span>.head<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, key)</span></span><span class="hljs-symbol">:</span><br><span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.<span class="hljs-symbol">dic:</span><br>n = <span class="hljs-keyword">self</span>.dic[key]<br><span class="hljs-keyword">self</span>.remove(n)<br><span class="hljs-keyword">self</span>.add(n)<br><span class="hljs-keyword">return</span> n.val<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, key, value)</span></span><span class="hljs-symbol">:</span><br><span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.<span class="hljs-symbol">dic:</span><br>n = <span class="hljs-keyword">self</span>.dic[key]<br><span class="hljs-keyword">self</span>.remove(n)<br>n = Node(key, value)<br><span class="hljs-keyword">self</span>.add(n)<br><span class="hljs-keyword">self</span>.dic[key] = n<br><span class="hljs-keyword">if</span> len(<span class="hljs-keyword">self</span>.dic) &gt; <span class="hljs-keyword">self</span>.<span class="hljs-symbol">capacity:</span><br>_n = <span class="hljs-keyword">self</span>.tail.prev<br><span class="hljs-keyword">self</span>.remove(_n)<br>del <span class="hljs-keyword">self</span>.dic[_n.key]<br><br><span class="hljs-comment"># 向头结点后插入结点</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, node)</span></span><span class="hljs-symbol">:</span><br>node.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">self</span>.head.<span class="hljs-keyword">next</span><br><span class="hljs-keyword">self</span>.head.<span class="hljs-keyword">next</span>.prev = node<br><br><span class="hljs-keyword">self</span>.head.<span class="hljs-keyword">next</span> = node<br>node.prev = <span class="hljs-keyword">self</span>.head<br><br><span class="hljs-comment"># 删除链表中某个节点</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, node)</span></span><span class="hljs-symbol">:</span><br>p = node.prev<br>n = node.<span class="hljs-keyword">next</span><br>p.<span class="hljs-keyword">next</span> = n<br>n.prev = p<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Leetcode 双向链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
